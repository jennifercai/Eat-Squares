--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=10 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_lpm_decode 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


-- Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_nma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode803w[1..0]	: WIRE;
	w_anode812w[3..0]	: WIRE;
	w_anode829w[3..0]	: WIRE;
	w_anode839w[3..0]	: WIRE;
	w_anode849w[3..0]	: WIRE;
	w_anode859w[3..0]	: WIRE;
	w_anode869w[3..0]	: WIRE;
	w_anode879w[3..0]	: WIRE;
	w_anode889w[3..0]	: WIRE;
	w_anode901w[1..0]	: WIRE;
	w_anode908w[3..0]	: WIRE;
	w_anode919w[3..0]	: WIRE;
	w_anode929w[3..0]	: WIRE;
	w_anode939w[3..0]	: WIRE;
	w_anode949w[3..0]	: WIRE;
	w_anode959w[3..0]	: WIRE;
	w_anode969w[3..0]	: WIRE;
	w_anode979w[3..0]	: WIRE;
	w_data801w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[9..0] = eq_wire[9..0];
	eq_wire[] = ( ( w_anode979w[3..3], w_anode969w[3..3], w_anode959w[3..3], w_anode949w[3..3], w_anode939w[3..3], w_anode929w[3..3], w_anode919w[3..3], w_anode908w[3..3]), ( w_anode889w[3..3], w_anode879w[3..3], w_anode869w[3..3], w_anode859w[3..3], w_anode849w[3..3], w_anode839w[3..3], w_anode829w[3..3], w_anode812w[3..3]));
	w_anode803w[] = ( (w_anode803w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode812w[] = ( (w_anode812w[2..2] & (! w_data801w[2..2])), (w_anode812w[1..1] & (! w_data801w[1..1])), (w_anode812w[0..0] & (! w_data801w[0..0])), w_anode803w[1..1]);
	w_anode829w[] = ( (w_anode829w[2..2] & (! w_data801w[2..2])), (w_anode829w[1..1] & (! w_data801w[1..1])), (w_anode829w[0..0] & w_data801w[0..0]), w_anode803w[1..1]);
	w_anode839w[] = ( (w_anode839w[2..2] & (! w_data801w[2..2])), (w_anode839w[1..1] & w_data801w[1..1]), (w_anode839w[0..0] & (! w_data801w[0..0])), w_anode803w[1..1]);
	w_anode849w[] = ( (w_anode849w[2..2] & (! w_data801w[2..2])), (w_anode849w[1..1] & w_data801w[1..1]), (w_anode849w[0..0] & w_data801w[0..0]), w_anode803w[1..1]);
	w_anode859w[] = ( (w_anode859w[2..2] & w_data801w[2..2]), (w_anode859w[1..1] & (! w_data801w[1..1])), (w_anode859w[0..0] & (! w_data801w[0..0])), w_anode803w[1..1]);
	w_anode869w[] = ( (w_anode869w[2..2] & w_data801w[2..2]), (w_anode869w[1..1] & (! w_data801w[1..1])), (w_anode869w[0..0] & w_data801w[0..0]), w_anode803w[1..1]);
	w_anode879w[] = ( (w_anode879w[2..2] & w_data801w[2..2]), (w_anode879w[1..1] & w_data801w[1..1]), (w_anode879w[0..0] & (! w_data801w[0..0])), w_anode803w[1..1]);
	w_anode889w[] = ( (w_anode889w[2..2] & w_data801w[2..2]), (w_anode889w[1..1] & w_data801w[1..1]), (w_anode889w[0..0] & w_data801w[0..0]), w_anode803w[1..1]);
	w_anode901w[] = ( (w_anode901w[0..0] & data_wire[3..3]), enable_wire);
	w_anode908w[] = ( (w_anode908w[2..2] & (! w_data801w[2..2])), (w_anode908w[1..1] & (! w_data801w[1..1])), (w_anode908w[0..0] & (! w_data801w[0..0])), w_anode901w[1..1]);
	w_anode919w[] = ( (w_anode919w[2..2] & (! w_data801w[2..2])), (w_anode919w[1..1] & (! w_data801w[1..1])), (w_anode919w[0..0] & w_data801w[0..0]), w_anode901w[1..1]);
	w_anode929w[] = ( (w_anode929w[2..2] & (! w_data801w[2..2])), (w_anode929w[1..1] & w_data801w[1..1]), (w_anode929w[0..0] & (! w_data801w[0..0])), w_anode901w[1..1]);
	w_anode939w[] = ( (w_anode939w[2..2] & (! w_data801w[2..2])), (w_anode939w[1..1] & w_data801w[1..1]), (w_anode939w[0..0] & w_data801w[0..0]), w_anode901w[1..1]);
	w_anode949w[] = ( (w_anode949w[2..2] & w_data801w[2..2]), (w_anode949w[1..1] & (! w_data801w[1..1])), (w_anode949w[0..0] & (! w_data801w[0..0])), w_anode901w[1..1]);
	w_anode959w[] = ( (w_anode959w[2..2] & w_data801w[2..2]), (w_anode959w[1..1] & (! w_data801w[1..1])), (w_anode959w[0..0] & w_data801w[0..0]), w_anode901w[1..1]);
	w_anode969w[] = ( (w_anode969w[2..2] & w_data801w[2..2]), (w_anode969w[1..1] & w_data801w[1..1]), (w_anode969w[0..0] & (! w_data801w[0..0])), w_anode901w[1..1]);
	w_anode979w[] = ( (w_anode979w[2..2] & w_data801w[2..2]), (w_anode979w[1..1] & w_data801w[1..1]), (w_anode979w[0..0] & w_data801w[0..0]), w_anode901w[1..1]);
	w_data801w[2..0] = data_wire[2..0];
END;
--VALID FILE

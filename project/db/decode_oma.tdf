--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=11 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_lpm_decode 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


-- Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_oma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[10..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[10..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode656w[1..0]	: WIRE;
	w_anode665w[3..0]	: WIRE;
	w_anode682w[3..0]	: WIRE;
	w_anode692w[3..0]	: WIRE;
	w_anode702w[3..0]	: WIRE;
	w_anode712w[3..0]	: WIRE;
	w_anode722w[3..0]	: WIRE;
	w_anode732w[3..0]	: WIRE;
	w_anode742w[3..0]	: WIRE;
	w_anode754w[1..0]	: WIRE;
	w_anode761w[3..0]	: WIRE;
	w_anode772w[3..0]	: WIRE;
	w_anode782w[3..0]	: WIRE;
	w_anode792w[3..0]	: WIRE;
	w_anode802w[3..0]	: WIRE;
	w_anode812w[3..0]	: WIRE;
	w_anode822w[3..0]	: WIRE;
	w_anode832w[3..0]	: WIRE;
	w_data654w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[10..0] = eq_wire[10..0];
	eq_wire[] = ( ( w_anode832w[3..3], w_anode822w[3..3], w_anode812w[3..3], w_anode802w[3..3], w_anode792w[3..3], w_anode782w[3..3], w_anode772w[3..3], w_anode761w[3..3]), ( w_anode742w[3..3], w_anode732w[3..3], w_anode722w[3..3], w_anode712w[3..3], w_anode702w[3..3], w_anode692w[3..3], w_anode682w[3..3], w_anode665w[3..3]));
	w_anode656w[] = ( (w_anode656w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode665w[] = ( (w_anode665w[2..2] & (! w_data654w[2..2])), (w_anode665w[1..1] & (! w_data654w[1..1])), (w_anode665w[0..0] & (! w_data654w[0..0])), w_anode656w[1..1]);
	w_anode682w[] = ( (w_anode682w[2..2] & (! w_data654w[2..2])), (w_anode682w[1..1] & (! w_data654w[1..1])), (w_anode682w[0..0] & w_data654w[0..0]), w_anode656w[1..1]);
	w_anode692w[] = ( (w_anode692w[2..2] & (! w_data654w[2..2])), (w_anode692w[1..1] & w_data654w[1..1]), (w_anode692w[0..0] & (! w_data654w[0..0])), w_anode656w[1..1]);
	w_anode702w[] = ( (w_anode702w[2..2] & (! w_data654w[2..2])), (w_anode702w[1..1] & w_data654w[1..1]), (w_anode702w[0..0] & w_data654w[0..0]), w_anode656w[1..1]);
	w_anode712w[] = ( (w_anode712w[2..2] & w_data654w[2..2]), (w_anode712w[1..1] & (! w_data654w[1..1])), (w_anode712w[0..0] & (! w_data654w[0..0])), w_anode656w[1..1]);
	w_anode722w[] = ( (w_anode722w[2..2] & w_data654w[2..2]), (w_anode722w[1..1] & (! w_data654w[1..1])), (w_anode722w[0..0] & w_data654w[0..0]), w_anode656w[1..1]);
	w_anode732w[] = ( (w_anode732w[2..2] & w_data654w[2..2]), (w_anode732w[1..1] & w_data654w[1..1]), (w_anode732w[0..0] & (! w_data654w[0..0])), w_anode656w[1..1]);
	w_anode742w[] = ( (w_anode742w[2..2] & w_data654w[2..2]), (w_anode742w[1..1] & w_data654w[1..1]), (w_anode742w[0..0] & w_data654w[0..0]), w_anode656w[1..1]);
	w_anode754w[] = ( (w_anode754w[0..0] & data_wire[3..3]), enable_wire);
	w_anode761w[] = ( (w_anode761w[2..2] & (! w_data654w[2..2])), (w_anode761w[1..1] & (! w_data654w[1..1])), (w_anode761w[0..0] & (! w_data654w[0..0])), w_anode754w[1..1]);
	w_anode772w[] = ( (w_anode772w[2..2] & (! w_data654w[2..2])), (w_anode772w[1..1] & (! w_data654w[1..1])), (w_anode772w[0..0] & w_data654w[0..0]), w_anode754w[1..1]);
	w_anode782w[] = ( (w_anode782w[2..2] & (! w_data654w[2..2])), (w_anode782w[1..1] & w_data654w[1..1]), (w_anode782w[0..0] & (! w_data654w[0..0])), w_anode754w[1..1]);
	w_anode792w[] = ( (w_anode792w[2..2] & (! w_data654w[2..2])), (w_anode792w[1..1] & w_data654w[1..1]), (w_anode792w[0..0] & w_data654w[0..0]), w_anode754w[1..1]);
	w_anode802w[] = ( (w_anode802w[2..2] & w_data654w[2..2]), (w_anode802w[1..1] & (! w_data654w[1..1])), (w_anode802w[0..0] & (! w_data654w[0..0])), w_anode754w[1..1]);
	w_anode812w[] = ( (w_anode812w[2..2] & w_data654w[2..2]), (w_anode812w[1..1] & (! w_data654w[1..1])), (w_anode812w[0..0] & w_data654w[0..0]), w_anode754w[1..1]);
	w_anode822w[] = ( (w_anode822w[2..2] & w_data654w[2..2]), (w_anode822w[1..1] & w_data654w[1..1]), (w_anode822w[0..0] & (! w_data654w[0..0])), w_anode754w[1..1]);
	w_anode832w[] = ( (w_anode832w[2..2] & w_data654w[2..2]), (w_anode832w[1..1] & w_data654w[1..1]), (w_anode832w[0..0] & w_data654w[0..0]), w_anode754w[1..1]);
	w_data654w[2..0] = data_wire[2..0];
END;
--VALID FILE
